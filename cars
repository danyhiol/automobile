import SimpleSchema from 'simpl-schema';
SimpleSchema.extendOptions(['autoform']);
import { Mongo } from 'meteor/mongo';
import { Tracker } from 'meteor/tracker';
import { Meteor } from 'meteor/meteor'
// import { CountriesSchema } from './countries';
// import Countries from './countries.js';

// https://atmospherejs.com/doctorpangloss/filter-collections to implement all sort on the page 
// https://github.com/vazco/uniforms/blob/master/INTRODUCTION.md for working with form and react

Cars = new Mongo.Collection('cars');

Cars.allow({
    insert: () => false,
    update: () => false,
    remove: () => false
});

Cars.deny({
    insert: () => true,
    update: () => true,
    remove: () => true
});

Schemas = {};

Schemas.CarsSchema = new SimpleSchema({
    // Car condition when selling
    condition: {
        type: String,
        label: 'Condition',
        allowedValues: ['New', 'Used', 'Pre-Registration'],
        autoform: {
            label: 'Condition',
            type: 'select-checkbox-inline',
            options: function() {
                return [
                    { label: "New", value: "New" },
                    { label: "Used", value: "Used" },
                    { label: "Pre-Registration", value: "Pre-Registration" }
                ]
            }
        }
    },
    make: {
        type: String,
        label: 'Make'
    },
    modell: {
        type: String,
        label: 'Modell'
    },
    variant: {
        type: String,
        label: 'Variant'
    },
    // Vehicle type with litle pichture for advance search
    carType: {
        type: String,
        label: 'Vehicle Type',
        allowedValues: [
            'Cabriolet / Roadster',
            'Small Car', 'Estate Car',
            'Off-road Vehicle / Pickup Truck',
            'Saloon', 'Sports Car / Coupe',
            'Van-minibus',
            'Others'
        ],
        autoform: {
            type: 'select2',
            label: 'Vehicle Type',
            allowedValues: [
                'Cabriolet / Roadster',
                'Small Car',
                'Estate Car',
                'Off-road Vehicle / Pickup Truck',
                'Saloon',
                'Sports Car / Coupe',
                'Van-minibus',
                'Others'
            ],
            options: function() {
                return [
                    { label: "Cabriolet / Roadster", value: "Cabriolet / Roadster" },
                    { label: "Small Car", value: "Small Car" },
                    { label: "Estate Car", value: "Estate Car" },
                    { label: "Off-road Vehicle / Pickup Truck", value: "Off-road Vehicle / Pickup Truck" },
                    { label: "Saloon", value: "Saloon" },
                    { label: "Sports Car / Coupe", value: "Sports Car / Coupe" },
                    { label: "Van-minibus", value: "Van-minibus" },
                    { label: "Others", value: "Others" }
                ]
            }
        }
    },
    seats: {
        type: SimpleSchema.Integer,
        label: 'Number of Seats',
        allowedValues: [2, 3, 4, 5, 6, 7],
        autoform: {
            type: 'select2',
            options: function() {
                return [
                    { label: "2", value: 2 },
                    { label: "3", value: 3 },
                    { label: "4", value: 4 },
                    { label: "5", value: 5 },
                    { label: "6", value: 6 },
                    { label: "7", value: 7 }
                ]
            }
        }
    },
    doors: {
        type: String,
        label: 'Number of Doors',
        allowedValues: ['2/3', '4/5', '6/7'],
        autoform: {
            type: 'select2',
            options: function() {
                return [
                    { label: "2/3", value: '2/3' },
                    { label: "4/5", value: '4/5' },
                    { label: "6/7", value: '6/7' }
                ]
            }
        }
    },
    // Vehicle details used in the search
    currency: {
        type: String,
        label: 'Currency',
        allowedValues: ['FCFA', '€', '$', 'GBP'],
        autoform: {
            label: 'Currency',
            type: 'select-checkbox-inline',
            defaultValue: 'FCFA',
            options: function() {
                return [
                    { label: "Franc CFA", value: "FCFA" },
                    { label: "Euro", value: "€" },
                    { label: "Dollar", value: "$" },
                    { label: "Pound", value: "GBP" }
                ]
            }
        }
    },
    registration: {
        type: String,
        label: "First Registration",
        optional: true,
        allowedValues: ['1900', '1960', '1965', '1970', '1975', '1980', '1985', '1990', '1991', '1992', '1993', '1994', '1995',
            '1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009',
            '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017'
        ],
        autoform: {
            type: 'select2',
            options: function() {
                return [
                    { label: "1900", value: '1900' },
                    { label: "1960", value: '1960' },
                    { label: "1965", value: '1965' },
                    { label: "1970", value: '1970' },
                    { label: "1975", value: '1975' },
                    { label: "1980", value: '1980' },
                    { label: "1985", value: '1985' },
                    { label: "1990", value: '1990' },
                    { label: "1991", value: '1991' },
                    { label: "1992", value: '1992' },
                    { label: "1993", value: '1993' },
                    { label: "1994", value: '1994' },
                    { label: "1995", value: '1995' },
                    { label: "1996", value: '1996' },
                    { label: "1997", value: '1997' },
                    { label: "1998", value: '1998' },
                    { label: "1999", value: '1999' },
                    { label: "2000", value: '2000' },
                    { label: "2001", value: '2001' },
                    { label: "2002", value: '2002' },
                    { label: "2003", value: '2003' },
                    { label: "2004", value: '2004' },
                    { label: "2005", value: '2005' },
                    { label: "2006", value: '2006' },
                    { label: "2007", value: '2007' },
                    { label: "2008", value: '2008' },
                    { label: "2009", value: '2009' },
                    { label: "2010", value: '2010' },
                    { label: "2011", value: '2011' },
                    { label: "2012", value: '2012' },
                    { label: "2013", value: '2013' },
                    { label: "2014", value: '2014' },
                    { label: "2015", value: '2015' },
                    { label: "2016", value: '2016' },
                    { label: "2017", value: '2017' }
                ]
            }
        }
    },
    price: {
        type: Number,
        label: 'Price',
        autoform: {
            label: 'Price',
            type: 'number'
        }
    },
    kilometer: {
        type: SimpleSchema.Integer,
        label: 'Kilometer',
        autoform: {
            label: 'Kilometer',
            type: 'select-checkbox-inline',
            allowedValues: [
                5000, 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000, 125000, 150000,
                175000, 200000, 250000, 300000, 400000, 500000
            ],
            options: function() {
                return [
                    { label: "5,000", value: 5000 },
                    { label: "10,000", value: 10000 },
                    { label: "20,000", value: 20000 },
                    { label: "30,000", value: 30000 },
                    { label: "40,000", value: 40000 },
                    { label: "50,000", value: 50000 },
                    { label: "60,000", value: 60000 },
                    { label: "70,000", value: 70000 },
                    { label: "80,000", value: 80000 },
                    { label: "90,000", value: 90000 },
                    { label: "100,000", value: 100000 },
                    { label: "125,000", value: 125000 },
                    { label: "150,000", value: 150000 },
                    { label: "175,000", value: 175000 },
                    { label: "200,000", value: 200000 },
                    { label: "250,000", value: 250000 },
                    { label: "300,000", value: 300000 },
                    { label: "400,000", value: 400000 },
                    { label: "500,000", value: 500000 }
                ]
            }
        }

    },
    powerType: {
        type: String,
        label: 'Power Type',
        autoform: {
            label: 'Power Type',
            type: 'select-checkbox-inline',
            options: function() {
                return [
                    { label: "Horse Power", value: "HP" },
                    { label: "Kilowatt", value: "kW" }
                ]
            }
        }
    },
    power: {
        type: SimpleSchema.Integer,
        label: 'Power',
        allowedValues: [34, 50, 60, 75, 90, 101, 118, 131, 150, 200, 252, 303, 358, 402, 454],
        autoform: {
            label: 'Power',
            type: 'select2',
            options: function() {
                return [
                    { label: "34", value: 34 },
                    { label: "50", value: 50 },
                    { label: "60", value: 60 },
                    { label: "75", value: 75 },
                    { label: "90", value: 90 },
                    { label: "101", value: 101 },
                    { label: "118", value: 118 },
                    { label: "131", value: 131 },
                    { label: "150", value: 150 },
                    { label: "200", value: 200 },
                    { label: "252", value: 252 },
                    { label: "303", value: 303 },
                    { label: "358", value: 358 },
                    { label: "402", value: 402 },
                    { label: "454", value: 454 }
                ]
            }
        }
    },
    // Engine
    fuel: {
        type: String,
        label: 'Fuel Type',
        allowedValues: [
            "Petrol", "Diesel", "Electric", "Ethanol", "Hybrid (petrol/electric)", "Hybrid (diesel / electric)",
            "LPG", "Natural Gas", "Hydrogen", "Other"
        ],
        autoform: {
            label: 'Fuel Type',
            type: 'select-checkbox-inline',
            options: function() {
                return [
                    { label: "Petrol", value: "Petrol" },
                    { label: "Diesel", value: "Diesel" },
                    { label: "Electric", value: "Electric" },
                    { label: "Ethanol (FFV, E85, etc.)", value: "Ethanol" },
                    { label: "Hybrid (petrol/electric)", value: "Hybrid (petrol/electric)" },
                    { label: "Hybrid (diesel / electric)", value: "Hybrid (diesel / electric)" },
                    { label: "LPG", value: "LPG" },
                    { label: "Natural Gas", value: "Natural Gas" },
                    { label: "Hydrogen", value: "Hydrogen" },
                    { label: "Other", value: "Other" },
                ]
            }
        }

    },
    transmission: {
        type: String,
        label: 'Transmission',
        allowedValues: ["Manual gearbox", "Semi-automatic", "Automatic transmission"],
        autoform: {
            label: 'Transmission',
            type: 'select-checkbox-inline',
            options: function() {
                return [
                    { label: "Manual gearbox", value: "Manual gearbox" },
                    { label: "Semi-automatic", value: "Semi-automatic" },
                    { label: "Automatic transmission", value: "Automatic transmission" }
                ]
            }
        }
    },
    Capacity: {
        type: SimpleSchema.Integer,
        label: 'Cubic Capacity (in ccm)',
        allowedValues: [1000, 1200, 1400, 1600, 1800, 2000, 2600, 3000, 5000, 7500, 8000, 9000],
        autoform: {
            label: 'Cubic Capacity (in ccm)',
            type: 'select2',
            options: function() {
                return [
                    { label: "1,000 cm\xB3", value: 1000 },
                    { label: "1,200 cm\xB3", value: 1200 },
                    { label: "1,400 cm\xB3", value: 1400 },
                    { label: "1,600 cm\xB3", value: 1600 },
                    { label: "1,800 cm\xB3", value: 1800 },
                    { label: "2,000 cm\xB3", value: 2000 },
                    { label: "2,600 cm\xB3", value: 2600 },
                    { label: "3,000 cm\xB3", value: 3000 },
                    { label: "5,000 cm\xB3", value: 5000 },
                    { label: "7,500 cm\xB3", value: 7500 },
                    { label: "8,000 cm\xB3", value: 8000 },
                    { label: "9,000 cm\xB3", value: 9000 }
                ]
            }
        }
    },
    // Location meteor add chipcastle:countries   country list package command line: mongoimport -h localhost:3001 --db meteor --collection tweets --type json --file exampletweets.json --jsonArray	
    /*   place: {
           type: Schemas.CountriesSchema,
           optional: true
       },*/
    country: {
        type: Array,
        label: 'Country',
        autoform: {
            type: 'select2',
            afFieldInput: {
                multiple: false,
                select2Options: {
                    placeholder: 'Choose a Country',
                    tags: true,
                    style: "width: 50%",
                    // allowClear: true,
                    closeOnSelect: true,
                },
                // return select without duplicate data from another database https://coderwall.com/p/o9np9q/get-unique-values-from-a-collection-in-meteor
                options: function() {
                    // ".fetch()": convert a meteor cursor into an array - 
                    /*let aggCountry = Countries.aggregate([{ $match: { country: 'Cameroon' } }]);
                    console.log('Thi is the aggregated value ' + aggCountry);*/

                    let countriesArray = Countries.find({}, { sort: { country: 1 } }).fetch();
                    console.log('findArray ' + countriesArray);

                    //remove duplicates from country field
                    let distinctCountriesArray = _.uniq(countriesArray, false, function(d) {
                        return d.country
                    });
                    console.log('distinctFindArray ' + distinctCountriesArray);

                    // Map data for select2 labels and values.
                    let outputCoutries = _.map(distinctCountriesArray,
                        function(c) {
                            return {
                                label: c.country,
                                value: c._id
                            };
                        }
                    );
                    console.log('finalValue ' + outputCoutries);

                    return outputCoutries;
                }
            }
        }
    },
    'country.$': String,

    state: {
        type: Array,
        label: 'State',
        autoform: {
            type: 'select2',
            afFieldInput: {
                multiple: false,
                select2Options: {
                    placeholder: 'Choose a State',
                    tags: true,
                    style: "width: 50%",
                    // allowClear: true,
                    closeOnSelect: true
                },
                options: function() { // Fetch info from the title fieldtitle: { $exists: true, $not: { $size: 0 } } 
                        /*return Countries.find({ state: { $exists: true, $ne: [] } }, { fields: { state: 1 } }).map(function(c) {
                            return {
                                label: c.state,
                                value: c._id
                            }
                        })*/

                        let stateArray = Countries.find({}, { sort: { state: 1 } }).fetch();

                        //remove duplicates from country field
                        let distinctStateArray = _.uniq(stateArray, false, function(d) {
                            return d.state
                        });

                        // Map data for select2 labels and values.
                        let outputStates = _.map(distinctStateArray,
                            function(c) {
                                return {
                                    label: c.state,
                                    value: c._id
                                };
                            }
                        );

                        return outputStates;
                    }
                    /*options: function() { // Fetch info from the title fieldtitle: { $exists: true, $not: { $size: 0 } } 
                        return Countries.find({ state: { $exists: true, $ne: [] } }, { fields: { state: 1 } }).map(function(c) {
                            return {
                                label: c.state,
                                value: c.id
                            }
                        })
                    }*/
            }
        }

    },
    'state.$': String,

    city: {
        type: Array,
        label: 'City',
        autoform: {
            type: 'select2',
            afFieldInput: {
                multiple: false,
                select2Options: {
                    placeholder: 'Choose a City',
                    tags: true,
                    style: "width: 50%",
                    // allowClear: true,
                    closeOnSelect: true
                },
                options: function() { // Fetch info from the title fieldtitle: { $exists: true, $not: { $size: 0 } } 
                    /*return Countries.find({ city: { $exists: true, $ne: [] } }, { fields: { city: 1 } }).map(function(c) {
                        return {
                            label: c.city,
                            value: c._id
                        }
                    })*/

                    let cityArray = Countries.find({}, { sort: { city: 1 } }).fetch();

                    //remove duplicates from country field
                    let distinctCityArray = _.uniq(cityArray, false, function(d) {
                        return d.city
                    });

                    // Map data for select2 labels and values.
                    let outputCities = _.map(distinctCityArray,
                        function(c) {
                            return {
                                label: c.city,
                                value: c._id
                            };
                        }
                    );

                    return outputCities;
                }
            }
        }

    },
    'city.$': String,

    town: {
        type: Array,
        label: 'Town',
        autoform: {
            type: 'select2',
            options: function() { // Fetch info from the title fieldtitle: { $exists: true, $not: { $size: 0 } } 
                    if (this.field('country').value == "Afghanistan") {
                        return [
                                { label: "Douala", value: "Douala" },
                                { label: "Yaoundé", value: "Yaoundé" },
                                { label: "Garoua", value: "Garoua" },
                                { label: "Bamenda", value: "Bamenda" },
                                { label: "Maroua", value: "Maroua" },
                                { label: "Nkongsamba", value: "Nkongsamba" },
                                { label: "Bafoussam", value: "Bafoussam" },
                                { label: "Ngaoundéré", value: "Ngaoundéré" },
                                { label: "Bertoua", value: "Bertoua" },
                                { label: "Loum", value: "Loum" },
                                { label: "Kumba", value: "Kumba" },
                                { label: "Edéa", value: "Edéa" },
                                { label: "Kumbo", value: "Kumbo" },
                                { label: "Dschang", value: "Dschang" },
                                { label: "Mbouda", value: "Mbouda" },
                                { label: "Foumban", value: "Foumban" }
                            ]
                            /* } else {
                                 return [
                                     { label: "Test 1", value: "Test_1" },
                                     { label: "Test 2", value: "Test_2" }
                                 ]*/
                    }
                }
                /*afFieldInput: {
                    multiple: false,
                    select2Options: {
                        placeholder: 'Choose a town',
                        tags: true,
                        style: "width: 50%",
                        // allowClear: true,
                        closeOnSelect: true
                    },*/
                /*options: function() { // Fetch info from the title fieldtitle: { $exists: true, $not: { $size: 0 } } 
                    if (this.field('country').value == "Afghanistan") {
                    return [
                            { label: "Douala", value: "Douala" },
                            { label: "Yaoundé", value: "Yaoundé" },
                            { label: "Garoua", value: "Garoua" },
                            { label: "Bamenda", value: "Bamenda" },
                            { label: "Maroua", value: "Maroua" },
                            { label: "Nkongsamba", value: "Nkongsamba" },
                            { label: "Bafoussam", value: "Bafoussam" },
                            { label: "Ngaoundéré", value: "Ngaoundéré" },
                            { label: "Bertoua", value: "Bertoua" },
                            { label: "Loum", value: "Loum" },
                            { label: "Kumba", value: "Kumba" },
                            { label: "Edéa", value: "Edéa" },
                            { label: "Kumbo", value: "Kumbo" },
                            { label: "Dschang", value: "Dschang" },
                            { label: "Mbouda", value: "Mbouda" },
                            { label: "Foumban", value: "Foumban" }
                        ]
                        }
                }*/
                /*}*/
        }

    },
    'town.$': String,
    // Cars External colour
    colorExterior: {
        type: String,
        label: 'Exterior Colour',
        allowedValues: [
            "rgb(219, 182, 127)", "rgb(211, 154, 17)", "rgb(147, 97, 255)", "rgb(245, 211, 0)", "rgb(126, 186, 48)", "rgb(255, 64, 64)",
            "rgba(0, 0, 0, 0)", "rgba(0, 0, 0, 0)", "rgb(55, 110, 219)", "rgb(171, 171, 171)", "rgb(181, 181, 181)", "rgb(165,42,42)",
            "rgb(255, 127, 35)", "rgb(255, 255, 255)"
        ],
        autoform: {
            label: 'Exterior Colour',
            type: 'select-checkbox-inline',
            options: function() {
                return [
                    { label: "Beige", value: "rgb(219, 182, 127)" },
                    { label: "Gold", value: "rgb(211, 154, 17)" },
                    { label: "Purple", value: "rgb(147, 97, 255)" },
                    { label: "Yellew", value: "rgb(245, 211, 0)" },
                    { label: "Black", value: "rgb(51, 51, 51)" },
                    { label: "Green", value: "rgb(126, 186, 48)" },
                    { label: "Red", value: "rgb(255, 64, 64)" },
                    { label: "Metallic", value: "rgba(0, 0, 0, 0)" },
                    { label: "Blue", value: "rgb(55, 110, 219)" },
                    { label: "Grey", value: "rgb(171, 171, 171)" },
                    { label: "Silver", value: "rgb(181, 181, 181)" },
                    { label: "Brown", value: "rgb(165,42,42)" },
                    { label: "Orange", value: "rgb(255, 127, 35)" },
                    { label: "White", value: "rgb(255, 255, 255)" }
                ]
            }
        }
    },
    // Cars Features
    airConditioning: {
        type: String,
        label: 'Air Conditioning',
        allowedValues: ["No climatisation", "Manual or automatic climatisation", "Automatic air conditioning"],
        autoform: {
            label: 'Air Conditioning',
            type: 'select-checkbox-inline',
            options: function() {
                return [
                    { label: "No climatisation", value: "No climatisation" },
                    { label: "Manual or automatic climatisation", value: "Manual or automatic climatisation" },
                    { label: "Automatic air conditioning", value: "Automatic air conditioning" }
                ]
            }
        }
    },
    features: {
        type: String,
        label: 'Interior Features',
        allowedValues: [
            "Auxiliary heating", "Cruise control", "Electric windows", "MP3 interface", "Power Assisted Steering", "Sunroof",
            "Bluetooth", "Electric heated seats", "Hands-free kit", "Multifunction steering wheel", "Rain sensor", "Tuner/radio",
            "CD player", "Electric seat adjustment", "Head-up display", "Navigation system", "Ski bag", "Ventilated Seats",
            "Central locking", "Electric side mirror", "Isofix (child seat anchor points)", "On-board computer", "Start-stop system"
        ],
        autoform: {
            label: 'Interior Features',
            type: 'select-checkbox-inline',
            options: function() {
                return [
                    { label: "Auxiliary heating", value: "Auxiliary heating" },
                    { label: "Cruise control", value: "Cruise control" },
                    { label: "Electric windows", value: "Electric windows" },
                    { label: "MP3 interface", value: "MP3 interface" },
                    { label: "Power Assisted Steering", value: "Power Assisted Steering" },
                    { label: "Sunroof", value: "Sunroof" },
                    { label: "Bluetooth", value: "Bluetooth" },
                    { label: "Electric heated seats", value: "Electric heated seats" },
                    { label: "Hands-free kit", value: "Hands-free kit" },
                    { label: "Multifunction steering wheel", value: "Multifunction steering wheel" },
                    { label: "Rain sensor", value: "Rain sensor" },
                    { label: "Tuner/radio", value: "Tuner/radio" },
                    { label: "CD player", value: "CD player" },
                    { label: "Electric seat adjustment", value: "Electric seat adjustment" },
                    { label: "Head-up display", value: "Head-up display" },
                    { label: "Navigation system", value: "Navigation system" },
                    { label: "Ski bag", value: "Ski bag" },
                    { label: "Ventilated Seats", value: "Ventilated Seats" },
                    { label: "Central locking", value: "Central locking" },
                    { label: "Electric side mirror", value: "Electric side mirror" },
                    { label: "Isofix (child seat anchor points)", value: "Isofix (child seat anchor points)" },
                    { label: "On-board computer", value: "On-board computer" },
                    { label: "Start-stop system", value: "Start-stop system" }
                ]
            }
        }
    },
    security: {
        type: String,
        label: 'Security',
        allowedValues: [
            "ABS", "Collision Avoidance System", "Four wheel drive", "LED Headlights", "Adaptive Cruise Control",
            "Daytime running lights", "Immobilizer", "Light sensor", "Adaptive lighting", "ESP", "Keyless Entry", "Traction control",
            "Blind Spot Monitor", "Fog lamp", "Lane Departure Warning System", "Xenon headlights"
        ],
        autoform: {
            label: 'Security',
            type: 'select-checkbox-inline',
            options: function() {
                return [
                    { label: "ABS", value: "ABS" },
                    { label: "Collision Avoidance System", value: "Collision Avoidance System" },
                    { label: "Four wheel drive", value: "Four wheel drive" },
                    { label: "LED Headlights", value: "LED Headlights" },
                    { label: "Adaptive Cruise Control", value: "Adaptive Cruise Control" },
                    { label: "Daytime running lights", value: "Daytime running lights" },
                    { label: "Immobilizer", value: "Immobilizer" },
                    { label: "Light sensor", value: "Light sensor" },
                    { label: "Adaptive lighting", value: "Adaptive lighting" },
                    { label: "ESP", value: "ESP" },
                    { label: "Keyless Entry", value: "Keyless Entry" },
                    { label: "Traction control", value: "Traction control" },
                    { label: "Blind Spot Monitor", value: "Blind Spot Monitor" },
                    { label: "Fog lamp", value: "Fog lamp" },
                    { label: "Lane Departure Warning System", value: "Lane Departure Warning System" },
                    { label: "Xenon headlights", value: "Xenon headlights" }
                ]
            }
        }
    },
    airbag: {
        type: String,
        label: 'Airbags',
        allowedValues: ["Driver Airbag", "Front Airbags", "Front and Side Airbags", "Front and Side and More Airbags"],
        autoform: {
            label: 'Airbags',
            type: 'select2',
            options: function() {
                return [
                    { label: "Driver Airbag", value: "Driver Airbag" },
                    { label: "Front Airbags", value: "Front Airbags" },
                    { label: "Front and Side Airbags", value: "Front and Side Airbags" },
                    { label: "Front and Side and More Airbags", value: "Front and Side and More Airbags" }
                ]
            }
        }
    },
    sensor: {
        type: String,
        label: 'Parking Sensors',
        allowedValues: ["Rear", "Front", "Camera", "Self-steering systems"],
        autoform: {
            label: 'Parking Sensors',
            type: 'select-checkbox-inline',
            options: function() {
                return [
                    { label: "Rear", value: "Rear" },
                    { label: "Front", value: "Front" },
                    { label: "Camera", value: "Camera" },
                    { label: "Self-steering systems", value: "Self-steering systems" }
                ]
            }
        }
    },
    extras: {
        type: String,
        label: 'Extras',
        allowedValues: ["Alloy wheels", "Taxi", "Trailer coupling", "Panoramic roof", "Roof rack", "Disabled accessible"],
        autoform: {
            label: 'Extras',
            type: 'select-checkbox-inline',
            options: function() {
                return [
                    { label: "Alloy wheels", value: "Alloy wheels" },
                    { label: "Taxi", value: "Taxi" },
                    { label: "Trailer coupling", value: "Trailer coupling" },
                    { label: "Panoramic roof", value: "Panoramic roof" },
                    { label: "Roof rack", value: "Roof rack" },
                    { label: "Disabled accessible", value: "Disabled accessible" }
                ]
            }
        }
    },
    material: {
        type: String,
        label: 'Interior Material',
        allowedValues: ["Full leather", "Alcantara", "Part leather", "Cloth", "Velour", "Other"],
        autoform: {
            label: 'Interior Material',
            type: 'select-checkbox-inline',
            options: function() {
                return [
                    { label: "Full leather", value: "Full leather" },
                    { label: "Alcantara", value: "Alcantara" },
                    { label: "Part leather", value: "Part leather" },
                    { label: "Cloth", value: "Cloth" },
                    { label: "Velour", value: "Velour" },
                    { label: "Other", value: "Other" }
                ]
            }
        }
    },
    colourInterior: {
        type: String,
        label: 'Interior Colour',
        allowedValues: ["rgb(51, 51, 51)", "rgb(171, 171, 171)", "rgb(219, 182, 127)", "rgb(133, 94, 27)", "rgb(255, 0,0)", "rgb(0, 255, 0)", "rgb(0, 0, 255)", "rgb(255, 255, 255)"],
        autoform: {
            label: 'Interior Colour',
            type: 'select-checkbox-inline',
            options: function() {
                return [
                    { label: "Black", value: "rgb(51, 51, 51)" },
                    { label: "Grey", value: "rgb(171, 171, 171)" },
                    { label: "Beige", value: "rgb(219, 182, 127)" },
                    { label: "Brown", value: "rgb(133, 94, 27)" },
                    { label: "Red", value: "rgb(255, 0,0)" },
                    { label: "Lime", value: "rgb(0, 255, 0)" },
                    { label: "Blue", value: "rgb(0, 0, 255)" },
                    { label: "Other", value: "rgb(255, 255, 255)" }
                ]
            }
        }
    },
    // Offer Details entered when submitting the car
    pictures: {
        type: String,
        label: 'Ads Pictures',
        optional: true,
        autoform: {
            label: 'Ads Pictures',
            type: 'image',
        }
    },
    hasPictures: {
        type: Boolean,
        autoValue: function() {
            if (this.field('pictures').isSet) {
                return { $set: { hasPictures: true } };
            } else {
                return { $set: { hasPictures: false } };
            }
        },
        autoform: {
            type: 'hidden'
        }
    },
    video: {
        type: String,
        label: 'Ads Video',
        optional: true,
        autoform: {
            label: 'Ads Video',
            type: 'file',
        }
    },
    hasVeideo: {
        type: Boolean,
        autoValue: function() {
            if (this.field('video').isSet) {
                return { $set: { hasVeideo: true } };
            } else {
                return { $set: { hasVeideo: false } };
            }
        },
        autoform: {
            type: 'hidden'
        }
    },
    vendor: { // There are 3 type of user: Private, Dealer and Company
        type: String,
        label: 'Vendor',
        autoValue: function() {
            return this.user.roles;
        },
        autoform: {
            type: 'hidden'
        }
    },
    vehicleMarket: {
        type: String,
        label: 'Market Type',
        allowedValues: ["Export", "Commercial", "Import"],
        autoform: {
            label: 'Market Type',
            type: 'select2',
            options: function() {
                return [
                    { label: "Commercial", value: "Commercial" },
                    { label: "Export", value: "Export" },
                    { label: "Import", value: "Import" }
                ]
            }
        }
    },
    // Car Environment
    fuelConsumption: {
        type: String,
        label: 'Fuel Consumption',
        allowedValues: [
            "1 l/100km", "2 l/100km", "3 l/100km", "4 l/100km", "5 l/100km", "6 l/100km", "7 l/100km", "8 l/100km", "9 l/100km",
            "10 l/100km", "11 l/100km", "12 l/100km", "13 l/100km", "14 l/100km", "15 l/100km"
        ],
        autoform: {
            label: 'Fuel Consumption',
            type: 'select2',
            options: function() {
                return [
                    { label: "1 l/100km", value: "1 l/100km" },
                    { label: "2 l/100km", value: "2 l/100km" },
                    { label: "3 l/100km", value: "3 l/100km" },
                    { label: "4 l/100km", value: "4 l/100km" },
                    { label: "5 l/100km", value: "5 l/100km" },
                    { label: "6 l/100km", value: "6 l/100km" },
                    { label: "7 l/100km", value: "7 l/100km" },
                    { label: "8 l/100km", value: "8 l/100km" },
                    { label: "9 l/100km", value: "9 l/100km" },
                    { label: "10 l/100km", value: "10 l/100km" },
                    { label: "11 l/100km", value: "11 l/100km" },
                    { label: "12 l/100km", value: "12 l/100km" },
                    { label: "13 l/100km", value: "13 l/100km" },
                    { label: "14 l/100km", value: "14 l/100km" },
                    { label: "15 l/100km", value: "15 l/100km" }
                ]
            }
        }
    },
    emissionClass: {
        type: String,
        label: 'Emission Class',
        allowedValues: ["Euro 1", "Euro 2", "Euro 3", "Euro 4", "Euro 5", "Euro 6"],
        autoform: {
            label: 'Emission Class',
            type: 'select2',
            options: function() {
                return [
                    { label: "Euro 1", value: "Euro 1" },
                    { label: "Euro 2", value: "Euro 2" },
                    { label: "Euro 3", value: "Euro 3" },
                    { label: "Euro 4", value: "Euro 4" },
                    { label: "Euro 5", value: "Euro 5" },
                    { label: "Euro 6", value: "Euro 6" }
                ]
            }
        }
    },
    // Vehicle history
    stateHistory: {
        type: String,
        label: 'Vehicle history State',
        allowedValues: ["Full Service History", "Non-smoker vehicle", "Warranty", "Roadworthy"],
        autoform: {
            label: 'Vehicle history State',
            type: 'select-checkbox-inline',
            options: function() {
                return [
                    { label: "Full Service History", value: 'Full Service History' },
                    { label: "Non-smoker vehicle", value: 'Non-smoker vehicle' },
                    { label: "Warranty", value: 'Warranty' },
                    { label: "Roadworthy", value: 'Roadworthy' }
                ]
            }
        }
    },
    damage: {
        type: Boolean,
        label: 'Vehicle Damaged?',
        autoform: {
            label: 'Vehicle Damaged?',
            type: 'boolean-checkbox'
        }
    },
    ownerNumber: {
        type: SimpleSchema.Integer,
        label: 'Number of Vehicle Owners',
        allowedValues: [1, 2, 3, 4],
        autoform: {
            label: 'Number of Vehicle Owners',
            type: 'select2',
            options: function() {
                return [
                    { label: "1 Only", value: 1 },
                    { label: "Up to 2", value: 2 },
                    { label: "Up to 3", value: 3 },
                    { label: "Up to 4", value: 4 }
                ]
            }
        }
    },
    // Force value to be current date (on server) upon insert
    // and prevent updates thereafter.
    createdAt: {
        type: Date,
        autoValue: function() {
            if (this.isInsert) {
                return new Date();
            } else if (this.isUpsert) {
                return { $setOnInsert: new Date() };
            } else {
                this.unset(); // Prevent user from supplying their own value
            }
        },
        autoform: {
            type: 'hidden'
        }
    },
    // Force value to be current date (on server) upon update
    // and don't allow it to be set upon insert.
    updatedAt: {
        type: Date,
        autoValue: function() {
            if (this.isUpdate) {
                return new Date();
            }
        },
        denyInsert: true,
        optional: true,
        autoform: {
            type: 'hidden'
        }
    }
}, { tracker: Tracker });

// Schemas.CarsSchema.extend(Schemas.CountriesSchema);

Cars.attachSchema(Schemas.CarsSchema);
